/* SigmaStar trade secret */
/* Copyright (c) [2019~2020] SigmaStar Technology.
All rights reserved.

Unless otherwise stipulated in writing, any and all information contained
herein regardless in any format shall remain the sole proprietary of
SigmaStar and be kept in strict confidence
(SigmaStar Confidential Information) by the recipient.
Any unauthorized act including without limitation unauthorized disclosure,
copying, use, reproduction, sale, distribution, modification, disassembling,
reverse engineering and compiling of the contents of SigmaStar Confidential
Information is unlawful and strictly prohibited. SigmaStar hereby reserves the
rights to any and all damages, losses, costs and expenses resulting therefrom.
*/

#ifndef _SC301IOT_INIT_TABLE_H_


#define SC301IOT_PRESET_4M30 0
#define SC301IOT_PRESET_POWERON 1
#define SC301IOT_PRESET_4M30_FASTAE 2
#define SC301IOT_PRESET_3M30_HDR 3

#define _SC301IOT_PDWN_ON_ 0
#define _SC301IOT_RST_ON_ 0

#define _MAX_SENSOR_PADID 3

#define _SC301IOT_RES_4M30 1
#define _SC301IOT_RES_4M30_HDR 1

//static CMDQ_CMDS gTable[] __attribute__((aligned(8))) =
static SENSOR_INIT_TABLE Sensor_init_table[] __attribute__((aligned(8)))=
{
#if defined(SENSOR_INIT_CMDQ_MODE)
    /*set cmdq0 busy*/
    CMDQ_REG_DUMMY(CMDQ_STATUS_BUSY),
    VIF_REG_DUMMY(CMDQ_STATUS_BUSY),
    /*sensor reset*/
    SNR_RST(_SC301IOT_RST_ON_),       //reset  off
    CMDQ_DELAY_MS(1),            // delay 500Us
    SNR_PDWN(_SC301IOT_PDWN_ON_),     //power off
    CMDQ_DELAY_MS(1),            // delay 500Us
    SNR_MCLK_EN(0x0),               //0x0=MCLK 27MhZ, 0x7=24MHz
    SNR_PDWN(~_SC301IOT_PDWN_ON_),    //power on
    CMDQ_DELAY_MS(1),            // delay 500Us
    SNR_RST(~_SC301IOT_RST_ON_),      //reset on
    CMDQ_DELAY_MS(5),            // delay 500Us
#endif

    I2CM_2A1D_W(0x60, 0x0103, 0x01),
    I2CM_2A1D_W(0x60, 0x0100, 0x00),
    I2CM_2A1D_W(0x60, 0x36e9, 0x80),
    I2CM_2A1D_W(0x60, 0x37f9, 0x80),
    I2CM_2A1D_W(0x60, 0x301c, 0x78),
    I2CM_2A1D_W(0x60, 0x301f, 0x01),
    I2CM_2A1D_W(0x60, 0x30b8, 0x44),
    I2CM_2A1D_W(0x60, 0x3208, 0x08),
    I2CM_2A1D_W(0x60, 0x3209, 0x00),
    I2CM_2A1D_W(0x60, 0x320a, 0x06),
    I2CM_2A1D_W(0x60, 0x320b, 0x00),
    I2CM_2A1D_W(0x60, 0x320c, 0x04),
    I2CM_2A1D_W(0x60, 0x320d, 0x65),
    I2CM_2A1D_W(0x60, 0x320e, 0x06),
    I2CM_2A1D_W(0x60, 0x320f, 0x40),
    I2CM_2A1D_W(0x60, 0x3214, 0x11),
    I2CM_2A1D_W(0x60, 0x3215, 0x11),
    I2CM_2A1D_W(0x60, 0x3223, 0xc0), //0x3223 -> 0xc0;for first frame by shutter,
    I2CM_2A1D_W(0x60, 0x3028, 0x04), //wait BLC done min~max  //1~0x37
    I2CM_2A1D_W(0x60, 0x3231, 0x01),
    I2CM_2A1D_W(0x60, 0x3253, 0x0c),
    I2CM_2A1D_W(0x60, 0x3274, 0x09),
    I2CM_2A1D_W(0x60, 0x3301, 0x08),
    I2CM_2A1D_W(0x60, 0x3306, 0x58),
    I2CM_2A1D_W(0x60, 0x3308, 0x08),
    I2CM_2A1D_W(0x60, 0x330a, 0x00),
    I2CM_2A1D_W(0x60, 0x330b, 0xe0),
    I2CM_2A1D_W(0x60, 0x330e, 0x10),
    I2CM_2A1D_W(0x60, 0x3314, 0x14),
    I2CM_2A1D_W(0x60, 0x331e, 0x55),
    I2CM_2A1D_W(0x60, 0x331f, 0x7d),
    I2CM_2A1D_W(0x60, 0x3333, 0x10),
    I2CM_2A1D_W(0x60, 0x3334, 0x40),
    I2CM_2A1D_W(0x60, 0x335e, 0x06),
    I2CM_2A1D_W(0x60, 0x335f, 0x08),
    I2CM_2A1D_W(0x60, 0x3364, 0x5e),
    I2CM_2A1D_W(0x60, 0x337c, 0x02),
    I2CM_2A1D_W(0x60, 0x337d, 0x0a),
    I2CM_2A1D_W(0x60, 0x3390, 0x01),
    I2CM_2A1D_W(0x60, 0x3391, 0x03),
    I2CM_2A1D_W(0x60, 0x3392, 0x07),
    I2CM_2A1D_W(0x60, 0x3393, 0x08),
    I2CM_2A1D_W(0x60, 0x3394, 0x08),
    I2CM_2A1D_W(0x60, 0x3395, 0x08),
    I2CM_2A1D_W(0x60, 0x3396, 0x08),
    I2CM_2A1D_W(0x60, 0x3397, 0x09),
    I2CM_2A1D_W(0x60, 0x3398, 0x1f),
    I2CM_2A1D_W(0x60, 0x3399, 0x08),
    I2CM_2A1D_W(0x60, 0x339a, 0x0a),
    I2CM_2A1D_W(0x60, 0x339b, 0x40),
    I2CM_2A1D_W(0x60, 0x339c, 0x88),
    I2CM_2A1D_W(0x60, 0x33a2, 0x04),
    I2CM_2A1D_W(0x60, 0x33ad, 0x0c),
    I2CM_2A1D_W(0x60, 0x33b1, 0x80),
    I2CM_2A1D_W(0x60, 0x33b3, 0x30),
    I2CM_2A1D_W(0x60, 0x33f9, 0x68),
    I2CM_2A1D_W(0x60, 0x33fb, 0x80),
    I2CM_2A1D_W(0x60, 0x33fc, 0x48),
    I2CM_2A1D_W(0x60, 0x33fd, 0x5f),
    I2CM_2A1D_W(0x60, 0x349f, 0x03),
    I2CM_2A1D_W(0x60, 0x34a6, 0x48),
    I2CM_2A1D_W(0x60, 0x34a7, 0x5f),
    I2CM_2A1D_W(0x60, 0x34a8, 0x30),
    I2CM_2A1D_W(0x60, 0x34a9, 0x30),
    I2CM_2A1D_W(0x60, 0x34aa, 0x00),
    I2CM_2A1D_W(0x60, 0x34ab, 0xf0),
    I2CM_2A1D_W(0x60, 0x34ac, 0x01),
    I2CM_2A1D_W(0x60, 0x34ad, 0x08),
    I2CM_2A1D_W(0x60, 0x34f8, 0x5f),
    I2CM_2A1D_W(0x60, 0x34f9, 0x10),
    I2CM_2A1D_W(0x60, 0x3630, 0xf0),
    I2CM_2A1D_W(0x60, 0x3631, 0x85),
    I2CM_2A1D_W(0x60, 0x3632, 0x74),
    I2CM_2A1D_W(0x60, 0x3633, 0x22),
    I2CM_2A1D_W(0x60, 0x3637, 0x4d),
    I2CM_2A1D_W(0x60, 0x3638, 0xcb),
    I2CM_2A1D_W(0x60, 0x363a, 0x8b),
    I2CM_2A1D_W(0x60, 0x363b, 0x02),
    I2CM_2A1D_W(0x60, 0x363c, 0x08),
    I2CM_2A1D_W(0x60, 0x3640, 0x00),
    I2CM_2A1D_W(0x60, 0x3641, 0x38),
    I2CM_2A1D_W(0x60, 0x3670, 0x4e),
    I2CM_2A1D_W(0x60, 0x3674, 0xc0),
    I2CM_2A1D_W(0x60, 0x3675, 0xb0),
    I2CM_2A1D_W(0x60, 0x3676, 0xa0),
    I2CM_2A1D_W(0x60, 0x3677, 0x85),
    I2CM_2A1D_W(0x60, 0x3678, 0x87),
    I2CM_2A1D_W(0x60, 0x3679, 0x8a),
    I2CM_2A1D_W(0x60, 0x367c, 0x49),
    I2CM_2A1D_W(0x60, 0x367d, 0x4f),
    I2CM_2A1D_W(0x60, 0x367e, 0x48),
    I2CM_2A1D_W(0x60, 0x367f, 0x4b),
    I2CM_2A1D_W(0x60, 0x3690, 0x33),
    I2CM_2A1D_W(0x60, 0x3691, 0x33),
    I2CM_2A1D_W(0x60, 0x3692, 0x44),
    I2CM_2A1D_W(0x60, 0x3699, 0x8a),
    I2CM_2A1D_W(0x60, 0x369a, 0xa1),
    I2CM_2A1D_W(0x60, 0x369b, 0xc2),
    I2CM_2A1D_W(0x60, 0x369c, 0x48),
    I2CM_2A1D_W(0x60, 0x369d, 0x4f),
    I2CM_2A1D_W(0x60, 0x36a2, 0x4b),
    I2CM_2A1D_W(0x60, 0x36a3, 0x4f),
    I2CM_2A1D_W(0x60, 0x370f, 0x01),
    I2CM_2A1D_W(0x60, 0x3714, 0x80),
    I2CM_2A1D_W(0x60, 0x3722, 0x09),
    I2CM_2A1D_W(0x60, 0x3724, 0x41),
    I2CM_2A1D_W(0x60, 0x3725, 0xc1),
    I2CM_2A1D_W(0x60, 0x3728, 0x00),
    I2CM_2A1D_W(0x60, 0x3771, 0x09),
    I2CM_2A1D_W(0x60, 0x3772, 0x05),
    I2CM_2A1D_W(0x60, 0x3773, 0x05),
    I2CM_2A1D_W(0x60, 0x377a, 0x48),
    I2CM_2A1D_W(0x60, 0x377b, 0x49),
    I2CM_2A1D_W(0x60, 0x3905, 0x8d),
    //I2CM_2A1D_W(0x60, 0x3907, 0x00),//blc
    //I2CM_2A1D_W(0x60, 0x3908, 0x41),//blc
    I2CM_2A1D_W(0x60, 0x391d, 0x08),
    I2CM_2A1D_W(0x60, 0x3922, 0x1a),
    I2CM_2A1D_W(0x60, 0x3926, 0x21),
    I2CM_2A1D_W(0x60, 0x3933, 0x80),
    I2CM_2A1D_W(0x60, 0x3934, 0x0d),
    I2CM_2A1D_W(0x60, 0x3937, 0x6a),
    I2CM_2A1D_W(0x60, 0x3939, 0x00),
    I2CM_2A1D_W(0x60, 0x393a, 0x0e),
    I2CM_2A1D_W(0x60, 0x39dc, 0x02),
    I2CM_2A1D_W(0x60, 0x3e00, 0x00),
    I2CM_2A1D_W(0x60, 0x3e01, 0x63),
    I2CM_2A1D_W(0x60, 0x3e02, 0x80),
    I2CM_2A1D_W(0x60, 0x3e03, 0x0b),
    I2CM_2A1D_W(0x60, 0x3e1b, 0x2a),
    I2CM_2A1D_W(0x60, 0x4407, 0x34),
    I2CM_2A1D_W(0x60, 0x440e, 0x02),
    I2CM_2A1D_W(0x60, 0x5001, 0x40),
    I2CM_2A1D_W(0x60, 0x5007, 0x80),
    I2CM_2A1D_W(0x60, 0x36e9, 0x24),
    I2CM_2A1D_W(0x60, 0x37f9, 0x24),

#if defined(SENSOR_INIT_CMDQ_MODE)
    /*Sensor runtime parameter*/
    SNR_SHUTTER_FPS_2A1D(0x60, 1000, 15000), // shutter 10ms , fps 15
    SNR_GAIN_2A1D(0x60, 1024),
    SNR_STREAM_ONOFF_2A1D(0x60, 1),
#else
    I2CM_2A1D_W(0x60,0x0100,0x01),   //set manual sleep mode disable
#endif

#if defined(SENSOR_INIT_CMDQ_MODE)
    /*set cmdq0 idle*/
    CMDQ_REG_DUMMY(CMDQ_STATUS_READY),
    VIF_REG_DUMMY(CMDQ_STATUS_READY),

    /*append dummy*/
    // CMDQ_TAG('EOT'),    //end of table
    CMDQ_NULL(),
    CMDQ_NULL(),
    CMDQ_NULL(),
    CMDQ_NULL(),
#endif
};


static SENSOR_INIT_TABLE SC301IOT_init_table_PowerOn[] __attribute__((aligned(8)))=
{
#if defined(SENSOR_INIT_CMDQ_MODE)
    /*set cmdq0 busy*/
    CMDQ_REG_DUMMY(CMDQ_STATUS_BUSY),
    VIF_REG_DUMMY(CMDQ_STATUS_BUSY),

    /*sensor reset*/
    SNR_RST(_SC301IOT_RST_ON_), // reset  off
    CMDQ_DELAY_MS(1),
    SNR_PDWN(_SC301IOT_PDWN_ON_), // power off
    CMDQ_DELAY_MS(1),
    SNR_MCLK_EN(0x0),              // MCLK //0x0=MCLK 27MhZ, 0xB=37.125MHz
    SNR_PDWN(~_SC301IOT_PDWN_ON_), // power on
    CMDQ_DELAY_MS(1),
    SNR_RST(~_SC301IOT_RST_ON_), // reset  on
    CMDQ_DELAY_MS(5), // T5 delay 2ms

#endif

#if defined(SENSOR_INIT_CMDQ_MODE)
    /*set cmdq0 idle*/
    CMDQ_REG_DUMMY(CMDQ_STATUS_TEMP_READY),
    VIF_REG_DUMMY(CMDQ_STATUS_TEMP_READY),

    /*append dummy*/
    // CMDQ_TAG('EOT'),    //end of table
    CMDQ_NULL(),
    CMDQ_NULL(),
    CMDQ_NULL(),
    CMDQ_NULL(),
#endif
};


static SENSOR_INIT_TABLE SC301IOT_init_table_4M30_FASTAE[] __attribute__((aligned(8)))=
{
    I2CM_2A1D_W(0x60, 0x0103, 0x01),
    I2CM_2A1D_W(0x60, 0x0100, 0x00),
    I2CM_2A1D_W(0x60, 0x36e9, 0x80),
    I2CM_2A1D_W(0x60, 0x37f9, 0x80),
    I2CM_2A1D_W(0x60, 0x301c, 0x78),
    I2CM_2A1D_W(0x60, 0x301f, 0x01),
    I2CM_2A1D_W(0x60, 0x30b8, 0x44),
    I2CM_2A1D_W(0x60, 0x3208, 0x08),
    I2CM_2A1D_W(0x60, 0x3209, 0x00),
    I2CM_2A1D_W(0x60, 0x320a, 0x06),
    I2CM_2A1D_W(0x60, 0x320b, 0x00),
    I2CM_2A1D_W(0x60, 0x320c, 0x04),
    I2CM_2A1D_W(0x60, 0x320d, 0x65),
    I2CM_2A1D_W(0x60, 0x320e, 0x06),
    I2CM_2A1D_W(0x60, 0x320f, 0x40),
    I2CM_2A1D_W(0x60, 0x3214, 0x11),
    I2CM_2A1D_W(0x60, 0x3215, 0x11),
    I2CM_2A1D_W(0x60, 0x3223, 0xc0), //0x3223 -> 0xc0;for first frame by shutter
    I2CM_2A1D_W(0x60, 0x3028, 0x04), //wait BLC done min~max  //1~0x37
    I2CM_2A1D_W(0x60, 0x3231, 0x01),
    I2CM_2A1D_W(0x60, 0x3253, 0x0c),
    I2CM_2A1D_W(0x60, 0x3274, 0x09),
    I2CM_2A1D_W(0x60, 0x3301, 0x08),
    I2CM_2A1D_W(0x60, 0x3306, 0x58),
    I2CM_2A1D_W(0x60, 0x3308, 0x08),
    I2CM_2A1D_W(0x60, 0x330a, 0x00),
    I2CM_2A1D_W(0x60, 0x330b, 0xe0),
    I2CM_2A1D_W(0x60, 0x330e, 0x10),
    I2CM_2A1D_W(0x60, 0x3314, 0x14),
    I2CM_2A1D_W(0x60, 0x331e, 0x55),
    I2CM_2A1D_W(0x60, 0x331f, 0x7d),
    I2CM_2A1D_W(0x60, 0x3333, 0x10),
    I2CM_2A1D_W(0x60, 0x3334, 0x40),
    I2CM_2A1D_W(0x60, 0x335e, 0x06),
    I2CM_2A1D_W(0x60, 0x335f, 0x08),
    I2CM_2A1D_W(0x60, 0x3364, 0x5e),
    I2CM_2A1D_W(0x60, 0x337c, 0x02),
    I2CM_2A1D_W(0x60, 0x337d, 0x0a),
    I2CM_2A1D_W(0x60, 0x3390, 0x01),
    I2CM_2A1D_W(0x60, 0x3391, 0x03),
    I2CM_2A1D_W(0x60, 0x3392, 0x07),
    I2CM_2A1D_W(0x60, 0x3393, 0x08),
    I2CM_2A1D_W(0x60, 0x3394, 0x08),
    I2CM_2A1D_W(0x60, 0x3395, 0x08),
    I2CM_2A1D_W(0x60, 0x3396, 0x08),
    I2CM_2A1D_W(0x60, 0x3397, 0x09),
    I2CM_2A1D_W(0x60, 0x3398, 0x1f),
    I2CM_2A1D_W(0x60, 0x3399, 0x08),
    I2CM_2A1D_W(0x60, 0x339a, 0x0a),
    I2CM_2A1D_W(0x60, 0x339b, 0x40),
    I2CM_2A1D_W(0x60, 0x339c, 0x88),
    I2CM_2A1D_W(0x60, 0x33a2, 0x04),
    I2CM_2A1D_W(0x60, 0x33ad, 0x0c),
    I2CM_2A1D_W(0x60, 0x33b1, 0x80),
    I2CM_2A1D_W(0x60, 0x33b3, 0x30),
    I2CM_2A1D_W(0x60, 0x33f9, 0x68),
    I2CM_2A1D_W(0x60, 0x33fb, 0x80),
    I2CM_2A1D_W(0x60, 0x33fc, 0x48),
    I2CM_2A1D_W(0x60, 0x33fd, 0x5f),
    I2CM_2A1D_W(0x60, 0x349f, 0x03),
    I2CM_2A1D_W(0x60, 0x34a6, 0x48),
    I2CM_2A1D_W(0x60, 0x34a7, 0x5f),
    I2CM_2A1D_W(0x60, 0x34a8, 0x30),
    I2CM_2A1D_W(0x60, 0x34a9, 0x30),
    I2CM_2A1D_W(0x60, 0x34aa, 0x00),
    I2CM_2A1D_W(0x60, 0x34ab, 0xf0),
    I2CM_2A1D_W(0x60, 0x34ac, 0x01),
    I2CM_2A1D_W(0x60, 0x34ad, 0x08),
    I2CM_2A1D_W(0x60, 0x34f8, 0x5f),
    I2CM_2A1D_W(0x60, 0x34f9, 0x10),
    I2CM_2A1D_W(0x60, 0x3630, 0xf0),
    I2CM_2A1D_W(0x60, 0x3631, 0x85),
    I2CM_2A1D_W(0x60, 0x3632, 0x74),
    I2CM_2A1D_W(0x60, 0x3633, 0x22),
    I2CM_2A1D_W(0x60, 0x3637, 0x4d),
    I2CM_2A1D_W(0x60, 0x3638, 0xcb),
    I2CM_2A1D_W(0x60, 0x363a, 0x8b),
    I2CM_2A1D_W(0x60, 0x363b, 0x02),
    I2CM_2A1D_W(0x60, 0x363c, 0x08),
    I2CM_2A1D_W(0x60, 0x3640, 0x00),
    I2CM_2A1D_W(0x60, 0x3641, 0x38),
    I2CM_2A1D_W(0x60, 0x3670, 0x4e),
    I2CM_2A1D_W(0x60, 0x3674, 0xc0),
    I2CM_2A1D_W(0x60, 0x3675, 0xb0),
    I2CM_2A1D_W(0x60, 0x3676, 0xa0),
    I2CM_2A1D_W(0x60, 0x3677, 0x85),
    I2CM_2A1D_W(0x60, 0x3678, 0x87),
    I2CM_2A1D_W(0x60, 0x3679, 0x8a),
    I2CM_2A1D_W(0x60, 0x367c, 0x49),
    I2CM_2A1D_W(0x60, 0x367d, 0x4f),
    I2CM_2A1D_W(0x60, 0x367e, 0x48),
    I2CM_2A1D_W(0x60, 0x367f, 0x4b),
    I2CM_2A1D_W(0x60, 0x3690, 0x33),
    I2CM_2A1D_W(0x60, 0x3691, 0x33),
    I2CM_2A1D_W(0x60, 0x3692, 0x44),
    I2CM_2A1D_W(0x60, 0x3699, 0x8a),
    I2CM_2A1D_W(0x60, 0x369a, 0xa1),
    I2CM_2A1D_W(0x60, 0x369b, 0xc2),
    I2CM_2A1D_W(0x60, 0x369c, 0x48),
    I2CM_2A1D_W(0x60, 0x369d, 0x4f),
    I2CM_2A1D_W(0x60, 0x36a2, 0x4b),
    I2CM_2A1D_W(0x60, 0x36a3, 0x4f),
    I2CM_2A1D_W(0x60, 0x370f, 0x01),
    I2CM_2A1D_W(0x60, 0x3714, 0x80),
    I2CM_2A1D_W(0x60, 0x3722, 0x09),
    I2CM_2A1D_W(0x60, 0x3724, 0x41),
    I2CM_2A1D_W(0x60, 0x3725, 0xc1),
    I2CM_2A1D_W(0x60, 0x3728, 0x00),
    I2CM_2A1D_W(0x60, 0x3771, 0x09),
    I2CM_2A1D_W(0x60, 0x3772, 0x05),
    I2CM_2A1D_W(0x60, 0x3773, 0x05),
    I2CM_2A1D_W(0x60, 0x377a, 0x48),
    I2CM_2A1D_W(0x60, 0x377b, 0x49),
    I2CM_2A1D_W(0x60, 0x3905, 0x8d),
    //I2CM_2A1D_W(0x60, 0x3907, 0x00),//blc
    //I2CM_2A1D_W(0x60, 0x3908, 0x41),//blc
    I2CM_2A1D_W(0x60, 0x391d, 0x08),
    I2CM_2A1D_W(0x60, 0x3922, 0x1a),
    I2CM_2A1D_W(0x60, 0x3926, 0x21),
    I2CM_2A1D_W(0x60, 0x3933, 0x80),
    I2CM_2A1D_W(0x60, 0x3934, 0x0d),
    I2CM_2A1D_W(0x60, 0x3937, 0x6a),
    I2CM_2A1D_W(0x60, 0x3939, 0x00),
    I2CM_2A1D_W(0x60, 0x393a, 0x0e),
    I2CM_2A1D_W(0x60, 0x39dc, 0x02),
    I2CM_2A1D_W(0x60, 0x3e00, 0x00),
    I2CM_2A1D_W(0x60, 0x3e01, 0x63),
    I2CM_2A1D_W(0x60, 0x3e02, 0x80),
    I2CM_2A1D_W(0x60, 0x3e03, 0x0b),
    I2CM_2A1D_W(0x60, 0x3e1b, 0x2a),
    I2CM_2A1D_W(0x60, 0x4407, 0x34),
    I2CM_2A1D_W(0x60, 0x440e, 0x02),
    I2CM_2A1D_W(0x60, 0x5001, 0x40),
    I2CM_2A1D_W(0x60, 0x5007, 0x80),
    I2CM_2A1D_W(0x60, 0x36e9, 0x24),
    I2CM_2A1D_W(0x60, 0x37f9, 0x24),

#if defined(SENSOR_INIT_CMDQ_MODE)
    /*Sensor runtime parameter*/
    SNR_SHUTTER_FPS_2A1D(0x60, 4000, 30000), // shutter 10ms , fps 30
    SNR_GAIN_2A1D(0x60, 1024),
    SNR_STREAM_ONOFF_2A1D(0x60, 1),
#else
    I2CM_2A1D_W(0x60,0x0100,0x01),   //set manual sleep mode disable
#endif
#if defined(SENSOR_INIT_CMDQ_MODE)
    /*set cmdq0 idle*/
    CMDQ_REG_DUMMY(CMDQ_STATUS_READY),
    VIF_REG_DUMMY(CMDQ_STATUS_READY),

    /*append dummy*/
    // CMDQ_TAG('EOT'),    //end of table
    CMDQ_NULL(),
    CMDQ_NULL(),
    CMDQ_NULL(),
    CMDQ_NULL(),
#endif
};
#if _SC301IOT_RES_4M30_HDR
static SENSOR_INIT_TABLE Sensor_3M30_HDR_init_table[] __attribute__((aligned(8)))={
#if defined(SENSOR_INIT_CMDQ_MODE)
    /*set cmdq0 busy*/
    CMDQ_REG_DUMMY(CMDQ_STATUS_BUSY),
    VIF_REG_DUMMY(CMDQ_STATUS_BUSY),
    /*sensor reset*/
    SNR_RST(_SC301IOT_RST_ON_),       //reset  off
    CMDQ_DELAY_MS(1),            // delay 500Us
    SNR_PDWN(_SC301IOT_PDWN_ON_),     //power off
    CMDQ_DELAY_MS(1),            // delay 500Us
    SNR_MCLK_EN(0x0),               //0x0=MCLK 27MhZ, 0x7=24MHz
    SNR_PDWN(~_SC301IOT_PDWN_ON_),    //power on
    CMDQ_DELAY_MS(1),            // delay 500Us
    SNR_RST(~_SC301IOT_RST_ON_),      //reset on
    CMDQ_DELAY_MS(5),            // delay 500Us
#endif
	I2CM_2A1D_W(0x60,0x0103,0x01),//cleaned_0x07_SC301IOT_MIPI_27Minput_2lane_10bit_1080Mbps_2048x1536_30fpsSHDR
	I2CM_2A1D_W(0x60,0x0100,0x00),
	I2CM_2A1D_W(0x60,0x36e9,0x80),
	I2CM_2A1D_W(0x60,0x37f9,0x80),
	I2CM_2A1D_W(0x60,0x301c,0x78),
	I2CM_2A1D_W(0x60,0x301f,0x07),
	I2CM_2A1D_W(0x60,0x30b8,0x44),
	I2CM_2A1D_W(0x60,0x3208,0x08),
	I2CM_2A1D_W(0x60,0x3209,0x00),
	I2CM_2A1D_W(0x60,0x320a,0x06),
	I2CM_2A1D_W(0x60,0x320b,0x00),
	I2CM_2A1D_W(0x60,0x320c,0x04),
	I2CM_2A1D_W(0x60,0x320d,0x65),
	I2CM_2A1D_W(0x60,0x320e,0x0c),
	I2CM_2A1D_W(0x60,0x320f,0x80),
	I2CM_2A1D_W(0x60,0x3214,0x11),
	I2CM_2A1D_W(0x60,0x3215,0x11),
	I2CM_2A1D_W(0x60,0x3223,0xd0),
	I2CM_2A1D_W(0x60,0x3231,0x01),
	I2CM_2A1D_W(0x60,0x3250,0xff),
	I2CM_2A1D_W(0x60,0x3253,0x0c),
	I2CM_2A1D_W(0x60,0x3274,0x09),
	I2CM_2A1D_W(0x60,0x3281,0x01),
	I2CM_2A1D_W(0x60,0x3301,0x08),
	I2CM_2A1D_W(0x60,0x3304,0x80),
	I2CM_2A1D_W(0x60,0x3306,0x58),
	I2CM_2A1D_W(0x60,0x3308,0x08),
	I2CM_2A1D_W(0x60,0x3309,0xa0),
	I2CM_2A1D_W(0x60,0x330a,0x00),
	I2CM_2A1D_W(0x60,0x330b,0xe0),
	I2CM_2A1D_W(0x60,0x330e,0x10),
	I2CM_2A1D_W(0x60,0x3314,0x14),
	I2CM_2A1D_W(0x60,0x331e,0x71),
	I2CM_2A1D_W(0x60,0x331f,0x91),
	I2CM_2A1D_W(0x60,0x3333,0x10),
	I2CM_2A1D_W(0x60,0x3334,0x40),
	I2CM_2A1D_W(0x60,0x335e,0x06),
	I2CM_2A1D_W(0x60,0x335f,0x08),
	I2CM_2A1D_W(0x60,0x3364,0x5e),
	I2CM_2A1D_W(0x60,0x337c,0x02),
	I2CM_2A1D_W(0x60,0x337d,0x0a),
	I2CM_2A1D_W(0x60,0x3390,0x01),
	I2CM_2A1D_W(0x60,0x3391,0x03),
	I2CM_2A1D_W(0x60,0x3392,0x07),
	I2CM_2A1D_W(0x60,0x3393,0x08),
	I2CM_2A1D_W(0x60,0x3394,0x08),
	I2CM_2A1D_W(0x60,0x3395,0x08),
	I2CM_2A1D_W(0x60,0x3396,0x08),
	I2CM_2A1D_W(0x60,0x3397,0x09),
	I2CM_2A1D_W(0x60,0x3398,0x1f),
	I2CM_2A1D_W(0x60,0x3399,0x08),
	I2CM_2A1D_W(0x60,0x339a,0x14),
	I2CM_2A1D_W(0x60,0x339b,0x28),
	I2CM_2A1D_W(0x60,0x339c,0x78),
	I2CM_2A1D_W(0x60,0x33a2,0x04),
	I2CM_2A1D_W(0x60,0x33ad,0x0c),
	I2CM_2A1D_W(0x60,0x33b1,0x80),
	I2CM_2A1D_W(0x60,0x33b3,0x38),
	I2CM_2A1D_W(0x60,0x33f9,0x58),
	I2CM_2A1D_W(0x60,0x33fb,0x80),
	I2CM_2A1D_W(0x60,0x33fc,0x48),
	I2CM_2A1D_W(0x60,0x33fd,0x4f),
	I2CM_2A1D_W(0x60,0x349f,0x03),
	I2CM_2A1D_W(0x60,0x34a6,0x48),
	I2CM_2A1D_W(0x60,0x34a7,0x4f),
	I2CM_2A1D_W(0x60,0x34a8,0x38),
	I2CM_2A1D_W(0x60,0x34a9,0x28),
	I2CM_2A1D_W(0x60,0x34aa,0x00),
	I2CM_2A1D_W(0x60,0x34ab,0xe0),
	I2CM_2A1D_W(0x60,0x34ac,0x01),
	I2CM_2A1D_W(0x60,0x34ad,0x08),
	I2CM_2A1D_W(0x60,0x34f8,0x5f),
	I2CM_2A1D_W(0x60,0x34f9,0x18),
	I2CM_2A1D_W(0x60,0x3630,0xf0),
	I2CM_2A1D_W(0x60,0x3631,0x85),
	I2CM_2A1D_W(0x60,0x3632,0x74),
	I2CM_2A1D_W(0x60,0x3633,0x22),
	I2CM_2A1D_W(0x60,0x3637,0x4d),
	I2CM_2A1D_W(0x60,0x3638,0xcb),
	I2CM_2A1D_W(0x60,0x363a,0x8b),
	I2CM_2A1D_W(0x60,0x363b,0x02),//add 20231222 for danny
	I2CM_2A1D_W(0x60,0x363c,0x08),
	I2CM_2A1D_W(0x60,0x3641,0x38),
	I2CM_2A1D_W(0x60,0x3670,0x4e),
	I2CM_2A1D_W(0x60,0x3674,0xc0),
	I2CM_2A1D_W(0x60,0x3675,0xa0),
	I2CM_2A1D_W(0x60,0x3676,0x90),
	I2CM_2A1D_W(0x60,0x3677,0x85),
	I2CM_2A1D_W(0x60,0x3678,0x86),
	I2CM_2A1D_W(0x60,0x3679,0x89),
	I2CM_2A1D_W(0x60,0x367c,0x48),
	I2CM_2A1D_W(0x60,0x367d,0x4f),
	I2CM_2A1D_W(0x60,0x367e,0x48),
	I2CM_2A1D_W(0x60,0x367f,0x4b),
	I2CM_2A1D_W(0x60,0x3690,0x33),
	I2CM_2A1D_W(0x60,0x3691,0x44),
	I2CM_2A1D_W(0x60,0x3692,0x55),
	I2CM_2A1D_W(0x60,0x3699,0x8a),
	I2CM_2A1D_W(0x60,0x369a,0xa1),
	I2CM_2A1D_W(0x60,0x369b,0xc2),
	I2CM_2A1D_W(0x60,0x369c,0x48),
	I2CM_2A1D_W(0x60,0x369d,0x4f),
	I2CM_2A1D_W(0x60,0x36a2,0x4b),
	I2CM_2A1D_W(0x60,0x36a3,0x4f),
	I2CM_2A1D_W(0x60,0x36ea,0x0a),
	I2CM_2A1D_W(0x60,0x36eb,0x0c),
	I2CM_2A1D_W(0x60,0x36ec,0x0c),
	I2CM_2A1D_W(0x60,0x36ed,0x15),
	I2CM_2A1D_W(0x60,0x370f,0x01),
	I2CM_2A1D_W(0x60,0x3714,0x80),
	I2CM_2A1D_W(0x60,0x3722,0x01),
	I2CM_2A1D_W(0x60,0x3724,0x41),
	I2CM_2A1D_W(0x60,0x3725,0xc1),
	I2CM_2A1D_W(0x60,0x3728,0x00),
	I2CM_2A1D_W(0x60,0x3771,0x09),
	I2CM_2A1D_W(0x60,0x3772,0x09),
	I2CM_2A1D_W(0x60,0x3773,0x05),
	I2CM_2A1D_W(0x60,0x377a,0x48),
	I2CM_2A1D_W(0x60,0x377b,0x4f),
	I2CM_2A1D_W(0x60,0x37fa,0x08),
	I2CM_2A1D_W(0x60,0x37fb,0x31),
	I2CM_2A1D_W(0x60,0x37fc,0x10),
	I2CM_2A1D_W(0x60,0x37fd,0x18),
	I2CM_2A1D_W(0x60,0x3905,0x8d),
	I2CM_2A1D_W(0x60,0x391d,0x08),
	I2CM_2A1D_W(0x60,0x3922,0x1a),
	I2CM_2A1D_W(0x60,0x3926,0x21),
	I2CM_2A1D_W(0x60,0x3933,0x80),
	I2CM_2A1D_W(0x60,0x3934,0x0d),
	I2CM_2A1D_W(0x60,0x3937,0x6a),
	I2CM_2A1D_W(0x60,0x3939,0x00),
	I2CM_2A1D_W(0x60,0x393a,0x0e),
	I2CM_2A1D_W(0x60,0x39dc,0x02),
	I2CM_2A1D_W(0x60,0x3e00,0x00),
	I2CM_2A1D_W(0x60,0x3e01,0xb9),
	I2CM_2A1D_W(0x60,0x3e02,0xc0),
	I2CM_2A1D_W(0x60,0x3e03,0x0b),
	I2CM_2A1D_W(0x60,0x3e04,0x0b),
	I2CM_2A1D_W(0x60,0x3e05,0xa0),
	I2CM_2A1D_W(0x60,0x3e1b,0x2a),
	I2CM_2A1D_W(0x60,0x3e23,0x00),
	I2CM_2A1D_W(0x60,0x3e24,0xbf),
	I2CM_2A1D_W(0x60,0x4407,0x34),
	I2CM_2A1D_W(0x60,0x440e,0x02),
	I2CM_2A1D_W(0x60,0x4509,0x10),
	I2CM_2A1D_W(0x60,0x4816,0x71),
	I2CM_2A1D_W(0x60,0x4825,0x05),//Tlpx
	I2CM_2A1D_W(0x60,0x4827,0x07),//Tclk-prepare
	I2CM_2A1D_W(0x60,0x5001,0x40),
	I2CM_2A1D_W(0x60,0x5007,0x80),
	I2CM_2A1D_W(0x60,0x36e9,0x24),
	I2CM_2A1D_W(0x60,0x37f9,0x24),

#if defined(SENSOR_INIT_CMDQ_MODE)
    /*Sensor runtime parameter*/
    SNR_HDR_SHUTTER_FPS_2A1D(0x60, 10000, 1000, 0, 15000),   //shutter 10ms , fps 30
    SNR_HDR_GAIN_2A1D(0x60, 1024, 1024, 0),
    SNR_CSI_CONFIG(216000000, 0x1C000000,0x0000, 2, 11),
    SNR_STREAM_ONOFF_2A1D(0x60, 1),
#else
    I2CM_2A1D_W(0x60,0x0100,0x01),   //set manual sleep mode disable
#endif

#if defined(SENSOR_INIT_CMDQ_MODE)
    /*set cmdq0 idle*/
    CMDQ_REG_DUMMY(CMDQ_STATUS_READY),
    VIF_REG_DUMMY(CMDQ_STATUS_READY),

    /*append dummy*/
    // CMDQ_TAG('EOT'),    //end of table
    CMDQ_NULL(),
    CMDQ_NULL(),
    CMDQ_NULL(),
    CMDQ_NULL(),
#endif
};
#endif
#endif